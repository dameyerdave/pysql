#!/usr/bin/env python3

# brew install unixodbc
# install odbc manager from odbcmanager.net
# install odbc driver from https://dev.mysql.com/downloads/connector/odbc/
# install odbc driver from 
# odbcinst -j --> /usr/local/etc/odbcinst.ini:
# [MySQL ODBC 8.0 Unicode Driver]
# driver = /usr/local/mysql-connector-odbc-8.0.18-macos10.14-x86-64bit/lib/libmyodbc8w.so
# 
# [MySQL ODBC 8.0 Ansi Driver]
# driver = /usr/local/mysql-connector-odbc-8.0.18-macos10.14-x86-64bit/lib/libmyodbc8a.so

import sys, os
# Script directory
scdir = os.path.dirname(os.path.realpath(__file__))
# Python Libraries
sys.path.append(scdir + '/lib')

import configparser
import argparse
import pyodbc 
from os.path import expanduser
import csv

class Config():
    def __init__(self):
        # Read config
        self.config = configparser.ConfigParser()
        self.config.read(scdir + '/pysql.ini')

    def get(self,section,key):
        value = self.config[section][key]
        # replace variables
        if '$' in value:
            _vars = re.findall('\$[\w\.]+', value)
            for _var in _vars:
                if not '.' in _var:
                    abort("Variable " + _var + "s invalid, it must be defined as '$section.key'!")
                _section, _key = _var.replace('$','').split('.')
                if not _section in self.config:
                    abort("Cannot find section '" + _section + "' defined in variable '" + _var + "'")
                if not _key in self.config[_section]:
                    abort("Cannot find key '" + _key + "' in section '" + _section + "' defined in variable '" + _var + "'")
                value = value.replace(_var, self.config[_section][_key])
        # Expand username in path values
        value = expanduser(value)
        return value

if __name__ == "__main__":

    try:
        config = Config()
    
        #parser = argparse.ArgumentParser(description='UC Management Script', epilog=epilog, formatter_class=CustomFormatter)
        #parser.add_argument('-a', '--action', required=True, choices=['config','makeconfig','clone','pull','status','merge','deploy'],  help='action to execute')
        #parser.add_argument('-e', '--environment', required=False, choices=['prod', 'test', 'manip', 'fixes', 'shared', 'tacLOM', 'localfiles'], default='prod', help='environment to use')
        #args = parser.parse_args()

        cnxn = pyodbc.connect(config.get('db', 'conn_string'))

        cursor = cnxn.cursor()
        rows = cursor.execute(config.get('sql', 'query'))

        #ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av
        with open(config.get('assets', 'filename'), 'w', newline='') as csvfile:
            writer = csv.writer(csvfile)
            writer.writerow([x[0] for x in cursor.description])  # column headers
            for row in rows:
                writer.writerow(row)
    except Exception as e:
        print(e)
